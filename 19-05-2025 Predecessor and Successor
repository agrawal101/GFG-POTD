Problem link - https://www.geeksforgeeks.org/problems/predecessor-and-successor/1?_gl=1*16pwyb2*_up*MQ..&gclid=Cj0KCQjwh_i_BhCzARIsANimeoEIpPMx-bYqTx5XofjLvqo6p17z0hEUHvkOxyfrbAJjglEDwaA0fOsaAsmREALw_wcB

class Solution {
    public ArrayList<Node> findPreSuc(Node root, int key) {
        // code here
        Node suc = null;
        Node pre = null;
        Node temp = root;
        while(temp!=null)
        {
            if(temp.data>key)
            {
                suc = temp;
                temp = temp.left;
            }
            else
            {
                temp = temp.right;
            }
        }
        temp = root;
        while(temp!=null)
        {
            if(temp.data<key)
            {
                pre = temp;
                temp = temp.right;
            }
            else
            temp = temp.left;
        }
        return new ArrayList<Node>(Arrays.asList(pre,suc));
    }
}
